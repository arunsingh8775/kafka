name: Kafka + Postgres Infra (simple run)

on:
  push:
    branches: ["main"]
  workflow_dispatch: {}

jobs:
  kafka:
    runs-on: ubuntu-latest
    steps:
      - name: Run Kafka (KRaft mode) on VM
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.VM_HOST }}
          username: opc
          key: ${{ secrets.VM_SSH_KEY }}
          script: |
            set -euo pipefail

            mkdir -p ~/kafka && cd ~/kafka

            # Public IP (only used if you want external Kafka clients)
            PUB_IP=$(curl -s ifconfig.me || hostname -I | awk '{print $1}')

            cat > docker-compose.yml <<'YAML'
            services:
              kafka:
                image: bitnami/kafka:3.7
                container_name: kafka
                restart: unless-stopped
                ports:
                  - "9092:9092"
                environment:
                  - ALLOW_PLAINTEXT_LISTENER=yes
                  - KAFKA_ENABLE_KRAFT=yes
                  - KAFKA_CFG_PROCESS_ROLES=broker,controller
                  - KAFKA_CFG_NODE_ID=1
                  - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
                  - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
                  - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT
                  - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
                  - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
                  - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
                healthcheck:
                  test: ["CMD-SHELL", "kafka-topics.sh --bootstrap-server localhost:9092 --list >/dev/null 2>&1"]
                  interval: 15s
                  timeout: 5s
                  retries: 20
            YAML

            # If you ALSO want outside-the-VM clients, append the public IP to advertised listeners:
            sudo sed -i "s#PLAINTEXT://kafka:9092#PLAINTEXT://kafka:9092,PLAINTEXT://$PUB_IP:9092#g" docker-compose.yml

            sudo docker compose up -d
            sudo docker compose ps

  postgres:
    runs-on: ubuntu-latest
    steps:
      - name: Run Postgres on VM (and ensure order_management DB exists)
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.VM_HOST }}
          username: opc
          key: ${{ secrets.VM_SSH_KEY }}
          script: |
            set -euo pipefail

            mkdir -p ~/postgres && cd ~/postgres

            cat > docker-compose.yml <<'YAML'
            services:
              postgres:
                image: postgres:16-alpine
                container_name: postgres
                restart: unless-stopped
                ports:
                  - "5432:5432"
                environment:
                  - POSTGRES_USER=postgres
                  - POSTGRES_PASSWORD=postgres
                  - POSTGRES_DB=order_management
                volumes:
                  - pgdata:/var/lib/postgresql/data
                healthcheck:
                  test: ["CMD-SHELL", "pg_isready -U postgres -d order_management -h 127.0.0.1 -p 5432"]
                  interval: 5s
                  timeout: 3s
                  retries: 20
                  start_period: 10s
            volumes:
              pgdata:
            YAML

            sudo docker compose up -d

            # Wait for Postgres to be healthy before running SQL
            echo "Waiting for Postgres to be healthy..."
            for i in $(seq 1 40); do
              if sudo docker inspect -f '{{.State.Health.Status}}' postgres 2>/dev/null | grep -q healthy; then
                echo "Postgres is healthy."
                break
              fi
              sleep 3
            done

            # Ensure database exists (covers case where volume already existed)
            sudo docker exec -e PGPASSWORD=postgres postgres sh -lc "
              psql -U postgres -h 127.0.0.1 -p 5432 -tAc \"
                SELECT 1 FROM pg_database WHERE datname='order_management'
              \" | grep -q 1 || psql -U postgres -h 127.0.0.1 -p 5432 -c 'CREATE DATABASE order_management';
            "

            sudo docker compose ps

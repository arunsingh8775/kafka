name: Deploy Kafka & Postgres (use repo compose files)

on:
  push:
    branches: ["main"]
  workflow_dispatch: {}

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Upload compose files to VM
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.VM_HOST }}
          username: opc
          key: ${{ secrets.VM_SSH_KEY }}
          source: |
            kafka/docker-compose.kafka.yml
            kafka/docker-compose.postgres.yml
          target: "~/infra"
          overwrite: true

      - name: Start stacks on VM
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.VM_HOST }}
          username: opc
          key: ${{ secrets.VM_SSH_KEY }}
          script: |
            set -euo pipefail

            mkdir -p ~/infra/kafka ~/infra/postgres
            mv -f ~/infra/docker-compose.kafka.yml ~/infra/kafka/
            mv -f ~/infra/docker-compose.postgres.yml ~/infra/postgres/

            echo "== Kafka =="
            cd ~/infra/kafka
            docker compose -f docker-compose.kafka.yml up -d
            docker compose -f docker-compose.kafka.yml ps || true

            echo "== Postgres =="
            cd ~/infra/postgres
            docker compose -f docker-compose.postgres.yml up -d
            docker compose -f docker-compose.postgres.yml ps || true

            echo "== Ensure DB (order_management) exists =="
            docker exec -e PGPASSWORD=postgres postgres \
              sh -c "psql -U postgres -d postgres -v ON_ERROR_STOP=1 -c \
              \"DO \$\$ BEGIN IF NOT EXISTS (SELECT FROM pg_database WHERE datname='order_management') THEN CREATE DATABASE order_management; END IF; END \$\$;\""

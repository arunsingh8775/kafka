name: Deploy Kafka & Postgres (use repo compose files)

on:
  push:
    branches: ["main"]
  workflow_dispatch: {}

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # DEBUG: show where the compose files actually are
      - name: List repo files
        run: |
          pwd
          echo "== Top level =="
          ls -la
          echo "== Any docker-compose*.yml in repo (2 levels) =="
          find . -maxdepth 2 -type f -name "docker-compose*.yml" -print -exec ls -l {} \;

      # Robust upload: match regardless of folder
      - name: Upload compose files to VM
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.VM_HOST }}
          username: opc
          key: ${{ secrets.VM_SSH_KEY }}
          # Upload any compose files found anywhere in the repo
          source: "**/docker-compose*.yml"
          target: "~/infra"
          overwrite: true
          strip_components: 0   # keep their relative paths

      - name: Start stacks on VM
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.VM_HOST }}
          username: opc
          key: ${{ secrets.VM_SSH_KEY }}
          script: |
            set -euo pipefail

            echo "== Files synced to ~/infra =="
            find ~/infra -maxdepth 3 -type f -name "docker-compose*.yml" -print

            # Adjust these paths if your files live in a subfolder
            KAFKA_YML=$(find ~/infra -type f -name "docker-compose.kafka.yml" | head -n1)
            PG_YML=$(find ~/infra -type f -name "docker-compose.postgres.yml" | head -n1)

            if [ -z "${KAFKA_YML:-}" ] || [ -z "${PG_YML:-}" ]; then
              echo "ERROR: Could not find docker-compose.kafka.yml or docker-compose.postgres.yml under ~/infra"
              exit 1
            fi

            echo "== Kafka =="
            docker compose -f "$KAFKA_YML" up -d
            docker compose -f "$KAFKA_YML" ps || true

            echo "== Postgres =="
            docker compose -f "$PG_YML" up -d
            docker compose -f "$PG_YML" ps || true

            echo "== Ensure DB (order_management) exists =="
            docker exec -e PGPASSWORD=postgres postgres \
              sh -c "psql -U postgres -d postgres -v ON_ERROR_STOP=1 -c \
              \"DO \$\$ BEGIN IF NOT EXISTS (SELECT FROM pg_database WHERE datname='order_management') THEN CREATE DATABASE order_management; END IF; END \$\$;\""

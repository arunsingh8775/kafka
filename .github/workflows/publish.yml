name: Deploy Kafka & Postgres (self-contained)

on:
  push:
    branches: ["main"]
  workflow_dispatch: {}

jobs:
  infra:
    runs-on: ubuntu-latest
    steps:
      - name: Deploy infra on VM
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.VM_HOST }}
          username: opc
          key: ${{ secrets.VM_SSH_KEY }}
          script: |
            set -euo pipefail
            mkdir -p ~/infra/kafka ~/infra/postgres

            # ----- Write Kafka compose -----
            cat > ~/infra/kafka/docker-compose.kafka.yml <<'YAML'
            version: "3.8"
            services:
              kafka:
                image: bitnami/kafka:3.7
                container_name: kafka
                restart: unless-stopped
                ports:
                  - "9092:9092"   # remove if you don't need external clients
                environment:
                  - ALLOW_PLAINTEXT_LISTENER=yes
                  - KAFKA_ENABLE_KRAFT=yes
                  - KAFKA_CFG_PROCESS_ROLES=broker,controller
                  - KAFKA_CFG_NODE_ID=1
                  - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
                  - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
                  - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT
                  - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
                  - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
                  - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
                healthcheck:
                  test: ["CMD-SHELL", "kafka-topics.sh --bootstrap-server localhost:9092 --list >/dev/null 2>&1"]
                  interval: 15s
                  timeout: 5s
                  retries: 20
            YAML

            # ----- Write Postgres compose -----
            cat > ~/infra/postgres/docker-compose.postgres.yml <<'YAML'
            version: "3.8"
            services:
              postgres:
                image: postgres:16-alpine
                container_name: postgres
                restart: unless-stopped
                ports:
                  - "5432:5432"   # remove if you don't want external access
                environment:
                  - POSTGRES_USER=postgres
                  - POSTGRES_PASSWORD=postgres
                  - POSTGRES_DB=order_management
                volumes:
                  - pgdata:/var/lib/postgresql/data
                healthcheck:
                  test: ["CMD-SHELL", "pg_isready -U postgres -d order_management -h 127.0.0.1 -p 5432"]
                  interval: 5s
                  timeout: 3s
                  retries: 30
                  start_period: 10s
            volumes:
              pgdata:
            YAML

            echo "== Start Kafka =="
            docker compose -f ~/infra/kafka/docker-compose.kafka.yml up -d
            docker compose -f ~/infra/kafka/docker-compose.kafka.yml ps || true

            echo "== Start Postgres =="
            docker compose -f ~/infra/postgres/docker-compose.postgres.yml up -d
            docker compose -f ~/infra/postgres/docker-compose.postgres.yml ps || true

            echo "== Wait for Postgres health =="
            for i in {1..60}; do
              state=$(docker inspect -f '{{.State.Health.Status}}' postgres 2>/dev/null || echo starting)
              [ "$state" = healthy ] && { echo "Postgres healthy"; break; }
              sleep 3
            done

            echo "== Ensure DB (order_management) exists =="
            docker exec -e PGPASSWORD=postgres postgres \
              sh -c "psql -U postgres -d postgres -v ON_ERROR_STOP=1 -c \
              \"DO \$\$ BEGIN IF NOT EXISTS (SELECT FROM pg_database WHERE datname='order_management') THEN CREATE DATABASE order_management; END IF; END \$\$;\""

            echo "== Done. Kafka & Postgres are up. =="
